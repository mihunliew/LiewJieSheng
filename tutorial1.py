# -*- coding: utf-8 -*-
"""tutorial1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BIOrSGK2olw5a2yYEG-OHq_SU46RJhLY
"""

import streamlit as st
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
st.header("Enter the value of x1: ")
x1 = int(input())
st.header("Enter the value of x2: ")
x2 = int(input())
st.header("Enter the value of y1: ")
y1 = int(input())
st.header("Enter the value of y2: ")
y2 = int(input())

dx = x2 - x1
dy = y2 - y1
sx1 = x1
sy1 = y1
if abs(dx) > abs(dy):
    steps = abs(dx)
else:
    steps = abs(dy)

xincrement = dx/steps
yincrement = dy/steps

i = 0

xcoordinates = []
ycoordinates = []


while i < steps:
    i +=1
    x1 = x1 + xincrement
    y1 = y1 + yincrement
    print("X1: ",x1, "Y1: ", y1)
    xcoordinates.append(x1)
    ycoordinates.append(y1)

plt.plot(xcoordinates, ycoordinates)

#Naming the Axis
plt.xlabel("X-Axis")
plt.ylabel("Y-Axis")

#Graph title
plt.title("DDA Algorithm")

#show the plot

plt.show()

from re import S
#double m = (double)(by-ay)/(bx-ax);
#double c = ay - m*ax;
#
#double y;
#int iy;
#
#for (int x=ax; x<=bx; x++) {
#
#y = m*x + c;
#iy = round(y);
#setPixel(x, iy);
#}

xcoordinates = []
ycoordinates = []

x1 = sx1
y1 = sy1

st.header(x1,y1,x2,y2)
dx = x2 - x1
dy = y2 - y1

if dx != 0:
    m = dy/dx
else:
    m = 0

c = y1 - m*x1

x = x1
while x < x2:
  x += 1
  y = m*x + c
  iy = round(y)
  st.header("X: ",x, "Y: ", y)
  xcoordinates.append(x)
  ycoordinates.append(y)

plt.plot(xcoordinates, ycoordinates)

#Naming the Axis
plt.xlabel("X-Axis")
plt.ylabel("Y-Axis")

#Graph title
plt.title("DDA Algorithm")

#show the plot

plt.show()

plt.title("Midpoint Line Algorithm")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")

def midpoint(x1, y1, x2, y2):
    w = x2 - x1 # dx
    h = y2 - y1 # dy

    # Initialize the decision parameter
    # F(x,y) = h(x - x1) / w(y - y1)
    x = x1
    y = y1

    st.header(f"x = {x}, y = {y}")
    # Initialize the plotting points
    xcoordinates = []
    ycoordinates = []

    while (x<x2):
        x = x + 1
        yy = y
        d = (h * (x - x1)) / (w * ((yy + 0.5) - y1))
        
        # East is Chosen
        if (d<0):
          y = y
        # North East is Chosen
        else:
          y = y + 1
        #print("d",d,"x",x,"y",y)
        xcoordinates.append(x)
        ycoordinates.append(y)
        print(f"x = {x}, y = {y}")
    plt.plot(xcoordinates, ycoordinates)
    plt.show()

if __name__=="__main__":
  x1 = sx1
  y1 = sy1
  midpoint(x1, y1, x2, y2)

plt.title("Bresenham Algorithm")
plt.xlabel("X Axis")
plt.ylabel("Y Axis")

def bres(x1,y1,x2,y2):
    x,y = x1,y1
    w = x2 - x1 # dx
    h = y2 - y1  # dy
    f = 2 * h - w
    gradient = dy/float(dx)
    xcoordinates = []
    ycoordinates = []
    while x < x2:
      x += 1
      if(x < 0):
        f += 2 * h
      else:
        f += 2 * (h - w)
        y += 1
      xcoordinates.append(x)
      ycoordinates.append(y)
    print(f"x = {x}, y = {y}")
        

    plt.plot(xcoordinates, ycoordinates)
    plt.show()


def main():
    x1 = sx1
    y1 = sy1

    bres(x1, y1, x2, y2)

if __name__ == "__main__":
    main()
